#!/usr/bin/env python3
import sys
from typing import List

MOD = 998244353  # type: int


fact_dic = {0: 1}
fact_max = 0


def factorial(n: int) -> int:
    global fact_max
    while fact_max < n:
        fact_max += 1
        fact_dic[fact_max] = fact_dic[fact_max - 1] * fact_max % MOD
    return fact_dic[n]


def comb(n: int, r: int) -> int:
    assert n >= r >= 0, (n, r)
    dividend = factorial(n)
    divider = factorial(r) * factorial(n - r) % MOD
    return dividend * pow(divider, -1, MOD) % MOD


def solve(N: int, P: int):
    p = P * pow(100, -1, MOD) % MOD

    def sub(k: int, m: int) -> int:
        if not 0 <= m <= k:
            return 0
        ans = comb(k, m)
        ans *= pow(p, m, MOD)
        ans %= MOD
        ans *= pow((1 - p) % MOD, k - m, MOD)
        ans %= MOD
        return ans

    ans = 0
    for i in range(N // 2, N + 1):
        prob = sub(i, N - i)
        prob += sub(i - 1, N - 1 - (i - 1)) * p % MOD
        prob %= MOD
        ans += prob * i % MOD
        ans %= MOD
    print(ans)


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    P = int(next(tokens))  # type: int
    solve(N, P)


if __name__ == '__main__':
    main()
