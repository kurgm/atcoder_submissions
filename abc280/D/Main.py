#!/usr/bin/env python3
import sys
from typing import List


def factorize(n: int):
    result: "dict[int, int]" = {}
    i = 2
    k = 0
    while n % i == 0:
        k += 1
        n //= i
    if k > 0:
        result[i] = k
    i = 3
    while i * i <= n:
        k = 0
        while n % i == 0:
            k += 1
            n //= i
        if k > 0:
            result[i] = k
        i += 2
    if n > 1:
        if n not in result:
            result[n] = 0
        result[n] += 1
    return result


def sub(f: int, k: int) -> int:

    assert f > 1
    d: "list[int]" = []
    p = 1
    i = 1
    while p <= k:
        d.append(p)
        p += f ** i
        i += 1

    i -= 1
    ans = 0
    for di in reversed(d):
        q, k = divmod(k, di)
        ans += q * (f ** i)
        i -= 1

    return ans


def solve(K: int):
    fK = factorize(K)
    print(max(sub(f, k) for f, k in fK.items()))


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    K = int(next(tokens))  # type: int
    solve(K)


if __name__ == '__main__':
    main()
