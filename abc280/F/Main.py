import types

_atcoder_code = """
# Python port of AtCoder Library.

__version__ = '0.0.1'
"""

atcoder = types.ModuleType('atcoder')
exec(_atcoder_code, atcoder.__dict__)

_atcoder_dsu_code = """
import typing


class DSU:
    '''
    Implement (union by size) + (path halving)

    Reference:
    Zvi Galil and Giuseppe F. Italiano,
    Data structures and algorithms for disjoint set union problems
    '''

    def __init__(self, n: int = 0) -> None:
        self._n = n
        self.parent_or_size = [-1] * n

    def merge(self, a: int, b: int) -> int:
        assert 0 <= a < self._n
        assert 0 <= b < self._n

        x = self.leader(a)
        y = self.leader(b)

        if x == y:
            return x

        if -self.parent_or_size[x] < -self.parent_or_size[y]:
            x, y = y, x

        self.parent_or_size[x] += self.parent_or_size[y]
        self.parent_or_size[y] = x

        return x

    def same(self, a: int, b: int) -> bool:
        assert 0 <= a < self._n
        assert 0 <= b < self._n

        return self.leader(a) == self.leader(b)

    def leader(self, a: int) -> int:
        assert 0 <= a < self._n

        parent = self.parent_or_size[a]
        while parent >= 0:
            if self.parent_or_size[parent] < 0:
                return parent
            self.parent_or_size[a], a, parent = (
                self.parent_or_size[parent],
                self.parent_or_size[parent],
                self.parent_or_size[self.parent_or_size[parent]]
            )

        return a

    def size(self, a: int) -> int:
        assert 0 <= a < self._n

        return -self.parent_or_size[self.leader(a)]

    def groups(self) -> typing.List[typing.List[int]]:
        leader_buf = [self.leader(i) for i in range(self._n)]

        result: typing.List[typing.List[int]] = [[] for _ in range(self._n)]
        for i in range(self._n):
            result[leader_buf[i]].append(i)

        return list(filter(lambda r: r, result))
"""

atcoder.dsu = types.ModuleType('atcoder.dsu')
exec(_atcoder_dsu_code, atcoder.dsu.__dict__)
DSU = atcoder.dsu.DSU

#!/usr/bin/env python3
import collections
import sys
from typing import List

# from atcoder.dsu import DSU


def solve(N: int, M: int, Q: int, A: "List[int]", B: "List[int]", C: "List[int]", X: "List[int]", Y: "List[int]"):
    dsu = DSU(N + 1)
    g: "dict[int, list[tuple[int, int]]]" = collections.defaultdict(list)
    excessive: "list[tuple[int, int, int]]" = []
    for Ai, Bi, Ci in zip(A, B, C):
        if dsu.same(Ai, Bi):
            excessive.append((Ai, Bi, Ci))
        else:
            dsu.merge(Ai, Bi)
            g[Ai].append((Bi, Ci))
            g[Bi].append((Ai, -Ci))

    value: "dict[int, int]" = {}
    unknown = set(range(1, N + 1))
    while unknown:
        p = unknown.pop()
        assert p not in value
        value[p] = 0
        q = collections.deque([p])
        while q:
            s = q.popleft()
            v = value[s]
            for t, dv in g[s]:
                if t in value:
                    continue
                value[t] = v + dv
                unknown.remove(t)
                q.append(t)

    infs: "set[int]" = set()
    for Ai, Bi, Ci in excessive:
        if value[Bi] - value[Ai] != Ci:
            infs.add(dsu.leader(Ai))

    for Xi, Yi in zip(X, Y):
        if not dsu.same(Xi, Yi):
            print("nan")
        elif dsu.leader(Xi) in infs:
            print("inf")
        else:
            print(value[Yi] - value[Xi])


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    C = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
        C[i] = int(next(tokens))
    X = [int()] * (Q)  # type: "List[int]"
    Y = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        X[i] = int(next(tokens))
        Y[i] = int(next(tokens))
    solve(N, M, Q, A, B, C, X, Y)


if __name__ == '__main__':
    main()
