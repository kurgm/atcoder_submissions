#!/usr/bin/env python3
import sys
from typing import List, Optional


sys.setrecursionlimit(1000000)


MOD = 998244353  # type: int


def moddiv(a: int, b: int):
    return a * pow(b, -1, MOD) % MOD


def build_tree(ss: "List[tuple[int, str]]", start: int, end: int, level: int) \
        -> "tuple[Optional[tuple[int, str]], int, list]":
    cstart = start
    if start < end and len(ss[start][1]) == level:
        node = ss[start]
        cstart += 1
    else:
        node = None

    children = []
    childstart = -1
    childmark = None
    for i in range(cstart, end):
        ci, cs = ss[i]
        if childmark != cs[level]:
            if childmark is not None:
                children.append(build_tree(ss, childstart, i, level + 1))
            childstart = i
            childmark = cs[level]

    if childstart != end and childmark is not None:
        children.append(build_tree(ss, childstart, end, level + 1))
    return node, end - start, children


def calc(
        tree: "tuple[Optional[tuple[int, str]], int, list]"
) -> "dict[int, int]":
    result: "dict[int, int]" = {}
    node, size, children = tree
    base = 0
    if node is not None:
        ni, nv = node
        result[ni] = 1
        base = 1

    for child in children:
        csize: int = child[1]
        cbase = (base + moddiv(size - base - csize, 2)) % MOD
        for cni, cresult in calc(child).items():
            result[cni] = (cbase + cresult) % MOD
    return result


def solve(N: int, S: "List[str]"):
    ss = sorted(enumerate(S), key=lambda k: k[1])
    tree = build_tree(ss, 0, N, 0)
    result = calc(tree)
    for i in range(N):
        print(result[i])


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    S = [next(tokens) for _ in range(N)]  # type: "List[str]"
    solve(N, S)


if __name__ == '__main__':
    main()
