#!/usr/bin/env python3
import sys
from typing import List


def f(a: int):
    f2 = 0
    f3 = 0
    while True:
        q, r = divmod(a, 2)
        if r != 0:
            break
        f2 += 1
        a = q
    while True:
        q, r = divmod(a, 3)
        if r != 0:
            break
        f3 += 1
        a = q

    return f2, f3, a


def solve(N: int, a: "List[int]"):
    f2, f3, b = zip(*map(f, a))
    if len(set(b)) > 1:
        print(-1)
        return

    mf2 = min(f2)
    mf3 = min(f3)
    print(sum(f2) + sum(f3) - (mf2 + mf3) * N)


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, a)


if __name__ == '__main__':
    main()
