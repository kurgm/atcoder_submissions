#!/usr/bin/env python3

import collections
from typing import List


YES = "Yes"  # type: str
NO = "No"  # type: str

dxdy: "List[tuple[int, int]]" = [(1, 0), (0, 1), (-1, 0), (0, -1)]


def solve(H: int, W: int, C: "List[str]") -> bool:
    def find_x0y0():
        for y0, Cy in enumerate(C):
            if "S" in Cy:
                x0 = Cy.index("S")
                return x0, y0
        assert False

    x0, y0 = find_x0y0()
    for dx0, dy0 in dxdy:
        x1 = x0 + dx0
        y1 = y0 + dy0
        if not (0 <= x1 < W and 0 <= y1 < H):
            continue
        if C[y1][x1] == "#":
            continue
        q = collections.deque([(x1, y1)])
        visited = {(x1, y1)}
        while q:
            x, y = q.popleft()
            for dx, dy in dxdy:
                nx = x + dx
                ny = y + dy
                if not (0 <= nx < W and 0 <= ny < H):
                    continue
                if (x, y, nx, ny) == (x1, y1, x0, y0):
                    continue
                if (nx, ny) in visited:
                    continue
                if C[ny][nx] == "#":
                    continue
                if (nx, ny) == (x0, y0):
                    return True
                visited.add((nx, ny))
                q.append((nx, ny))

    return False


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools
def main():
    # Failed to predict input format
    H, W = [int(x) for x in input().split()]
    C = [input() for _ in range(H)]
    if solve(H, W, C):
        print(YES)
    else:
        print(NO)


if __name__ == '__main__':
    main()
