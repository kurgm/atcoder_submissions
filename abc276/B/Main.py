#!/usr/bin/env python3
import collections
import sys
from typing import List


def solve(N: int, M: int, A: "List[int]", B: "List[int]"):
    d = collections.defaultdict(set)
    for Ai, Bi in zip(A, B):
        d[Ai].add(Bi)
        d[Bi].add(Ai)

    for i in range(1, N + 1):
        print(len(d[i]), *sorted(d[i]))


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, M, A, B)


if __name__ == '__main__':
    main()
