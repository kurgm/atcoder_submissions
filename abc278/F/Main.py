#!/usr/bin/env python3
import collections
import sys
from typing import Any, List


def solve(N: int, S: "List[str]"):
    d: "dict[str, list[tuple[int, str]]]" = {}
    for i, Si in enumerate(S):
        d.setdefault(Si[0], []).append((i, Si[-1]))

    def dest_from(m: int, s: str):
        for i, t in d.get(s, []):
            if (1 << i) & m:
                continue
            yield ((1 << i) | m), t

    dmap: "dict[tuple[int, str], int]" = {
        (0, s): 0
        for s in d.keys()
    }
    q = collections.deque(dmap)
    while q:
        m, s = q.popleft()
        depth = dmap[m, s]
        for m2, t in dest_from(m, s):
            if (m2, t) in dmap:
                continue
            dmap[m2, t] = depth + 1
            q.append((m2, t))

    pmap: "dict[tuple[int, str], Any]" = {}
    for m, s in sorted(dmap, key=dmap.__getitem__, reverse=True):
        nexts = list(dest_from(m, s))
        if len(nexts) == 0:
            pmap[m, s] = False
        else:
            pmap[m, s] = any(not pmap[m2, t] for m2, t in nexts)

    print("First" if any(pmap[0, s] for s in d.keys()) else "Second")


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    S = [next(tokens) for _ in range(N)]  # type: "List[str]"
    solve(N, S)


if __name__ == '__main__':
    main()
