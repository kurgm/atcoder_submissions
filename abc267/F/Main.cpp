#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
using namespace std;

std::vector<std::vector<long long> > ABmap;
std::vector<std::vector<long long> > queries;
std::map<std::pair<int, int>, int> answer;

void dfs(long long p, std::vector<long long> &stack, long long &deepest, long long &deepest_depth) {
    long long par = stack.empty() ? -1 : stack.back();
    stack.emplace_back(p);
    long long d = stack.size();
    if (deepest_depth < d) {
        deepest = p;
        deepest_depth = d;
    }
    for (long long q : ABmap[p]) {
        if (q == par) continue;
        if (queries[q].size() != 0) {
            std::vector<long long> newqd;
            newqd.reserve(queries[q].size());
            for (long long qd : queries[q]) {
                if (qd > d) {
                    newqd.push_back(qd);
                    continue;
                }
                answer.insert({{q, qd}, stack[stack.size() - qd]});
            }
            queries[q] = std::move(newqd);
        }
        dfs(q, stack, deepest, deepest_depth);
    }
    stack.pop_back();
}

long long dfs0(long long p) {
    std::vector<long long> stack;
    long long deepest = -1;
    long long deepest_depth = -1;
    dfs(p, stack, deepest, deepest_depth);
    return deepest;
}

void solve(long long N, std::vector<long long> A, std::vector<long long> B, long long Q, std::vector<long long> U, std::vector<long long> K){
    ABmap.resize(N + 1);
    for (int i = 0; i < N - 1; i++) {
        ABmap[A[i]].emplace_back(B[i]);
        ABmap[B[i]].emplace_back(A[i]);
    }
    queries.resize(N + 1);
    for (int i = 0; i < Q; i++) {
        queries[U[i]].emplace_back(K[i]);
    }

    long long l = dfs0(1);
    long long r = dfs0(l);
    dfs0(r);
    for (int i = 0; i < Q; i++) {
        auto it = answer.find({U[i], K[i]});
        if (it == answer.end()) {
            std::cout << -1 << std::endl;
        } else {
            std::cout << it->second << std::endl;
        }
    }
}

// Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools
int main(){
    long long N;
    std::scanf("%lld", &N);
    std::vector<long long> A(N-1);
    std::vector<long long> B(N-1);
    for(int i = 0 ; i < N-1 ; i++){
        std::scanf("%lld", &A[i]);
        std::scanf("%lld", &B[i]);
    }
    long long Q;
    std::scanf("%lld", &Q);
    std::vector<long long> U(Q);
    std::vector<long long> K(Q);
    for(int i = 0 ; i < Q ; i++){
        std::scanf("%lld", &U[i]);
        std::scanf("%lld", &K[i]);
    }
    solve(N, std::move(A), std::move(B), Q, std::move(U), std::move(K));
    return 0;
}