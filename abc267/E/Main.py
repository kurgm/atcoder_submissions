#!/usr/bin/env python3
from collections import defaultdict
import sys
from typing import List


def solve(N: int, M: int, A: "List[int]", U: "List[int]", V: "List[int]"):
    s0 = [0] * N
    uvmap = defaultdict(list)  # type: dict[int, list[int]]
    for Ui, Vi in zip(U, V):
        Ui -= 1
        Vi -= 1
        s0[Ui] += A[Vi]
        s0[Vi] += A[Ui]
        uvmap[Ui].append(Vi)
        uvmap[Vi].append(Ui)

    def f(lim: int) -> bool:
        s = s0[:]
        removable = [i for i in range(N) if s[i] <= lim]
        count = 0
        while removable:
            i = removable.pop()
            count += 1
            Ai = A[i]
            for j in uvmap[i]:
                if s[j] <= lim:
                    continue
                s[j] -= Ai
                if s[j] <= lim:
                    removable.append(j)
        return count != N

    ub = sum(A) + 1
    lb = -1
    while lb + 1 < ub:
        mi = (lb + ub) // 2
        if f(mi):
            lb = mi
        else:
            ub = mi
    print(lb + 1)


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    U = [int()] * (M)  # type: "List[int]"
    V = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        U[i] = int(next(tokens))
        V[i] = int(next(tokens))
    solve(N, M, A, U, V)


if __name__ == '__main__':
    main()
