#!/usr/bin/env python3
import sys
from typing import List


# def solve(N: int, K: int, A: "List[int]"):
#     ans = 0
#     t = 0
#     for Ai in reversed(A):
#         x, y = divmod(N, Ai)
#         ans += Ai * ((t + x + 1) // 2 - (t + 1) // 2)
#         t += x
#         N = y
#     print(ans)


def solve(N: int, K: int, A: "List[int]"):
    ansmap = [0] * (N + 1)
    for i in range(1, N + 1):
        t = 0
        for Ai in A:
            if Ai > i:
                break
            j = i - Ai
            t = max(t, j - ansmap[j] + Ai)
        ansmap[i] = t

    print(ansmap[N])


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(K)]  # type: "List[int]"
    solve(N, K, A)


if __name__ == '__main__':
    main()
