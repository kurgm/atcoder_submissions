#!/usr/bin/env python3
from collections import defaultdict
import sys
from typing import List


sys.setrecursionlimit(1000000)


def solve(N: int, X: int, Y: int, U: "List[int]", V: "List[int]"):
    g: "dict[int, list[int]]" = defaultdict(list)
    for Ui, Vi in zip(U, V):
        g[Ui].append(Vi)
        g[Vi].append(Ui)

    def dfs(s: int, prev: "int | None" = None) -> "list[int] | None":
        if s == Y:
            return [s]
        for t in g.get(s, []):
            if t == prev:
                continue
            r = dfs(t, s)
            if r is not None:
                r.append(s)
                return r
        return None

    path = dfs(X)
    assert path is not None
    print(*reversed(path))


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    Y = int(next(tokens))  # type: int
    U = [int()] * (N - 1)  # type: "List[int]"
    V = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        U[i] = int(next(tokens))
        V[i] = int(next(tokens))
    solve(N, X, Y, U, V)


if __name__ == '__main__':
    main()
