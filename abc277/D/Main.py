#!/usr/bin/env python3
import collections
import sys
from typing import List


def solve(N: int, M: int, A: "List[int]"):
    counter = collections.Counter(A)
    d: "list[int]" = []
    acc = 0
    last_i = -100
    for i, count in sorted(counter.items()):
        if i != last_i + 1 and last_i >= 0:
            d.append(acc)
            acc = 0
        acc += i * count
        last_i = i
    if M == last_i + 1 and counter[0] > 0 and d != []:
        d[0] += acc
    else:
        d.append(acc)
    print(sum(d) - max(d))


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, M, A)


if __name__ == '__main__':
    main()
