#!/usr/bin/env python3
import collections
import sys
from typing import List


def solve(N: int, A: "List[int]", B: "List[int]"):
    g: "dict[int, list[int]]" = collections.defaultdict(list)
    for Ai, Bi in zip(A, B):
        g[Ai].append(Bi)
        g[Bi].append(Ai)

    visited = {1}
    queue = collections.deque(visited)
    while queue:
        s = queue.popleft()
        for t in g[s]:
            if t in visited:
                continue
            visited.add(t)
            queue.append(t)

    print(max(visited))


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)


if __name__ == '__main__':
    main()
